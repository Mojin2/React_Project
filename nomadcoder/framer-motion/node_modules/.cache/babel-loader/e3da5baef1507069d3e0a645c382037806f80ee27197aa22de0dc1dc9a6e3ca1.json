{"ast":null,"code":"var _jsxFileName = \"/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Chart.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexCharts from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chart(_ref) {\n  _s();\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexCharts, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => parseFloat(price.close))\n      }],\n      options: {\n        chart: {\n          height: 500,\n          width: 500,\n          toolbar: {\n            show: false\n          }\n          //   background: \"transparent\",\n        },\n\n        // grid: { show: false },\n        stroke: {\n          curve: \"smooth\",\n          width: 3\n        },\n        // yaxis: {\n        //   show: false,\n        // },\n        // xaxis: {\n        //   axisBorder: { show: false },\n        //   labels: { show: false },\n        //   axisTicks: { show: false },\n        // },\n        // fill: {\n        //   type: \"gradient\",\n        //   gradient: { gradientToColors: [\"blue\"],stops:[0,100] },\n        // },\n        // colors: [\"red\"],\n        tooltip: {\n          y: {\n            formatter: value => `$ ${value.toFixed(3)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useQuery","fetchCoinHistory","ApexCharts","jsxDEV","_jsxDEV","Chart","_ref","_s","coinId","isLoading","data","children","type","series","name","map","price","parseFloat","close","options","chart","height","width","toolbar","show","stroke","curve","tooltip","y","formatter","value","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexCharts from \"react-apexcharts\";\ninterface CharProps {\n  coinId: string;\n}\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\nfunction Chart({ coinId }: CharProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexCharts\n          type={\"line\"}\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map((price) => parseFloat(price.close)),\n            },\n          ]}\n          options={{\n            chart: {\n              height: 500,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              //   background: \"transparent\",\n            },\n            // grid: { show: false },\n            stroke: {\n              curve: \"smooth\",\n              width: 3,\n            },\n            // yaxis: {\n            //   show: false,\n            // },\n            // xaxis: {\n            //   axisBorder: { show: false },\n            //   labels: { show: false },\n            //   axisTicks: { show: false },\n            // },\n            // fill: {\n            //   type: \"gradient\",\n            //   gradient: { gradientToColors: [\"blue\"],stops:[0,100] },\n            // },\n            // colors: [\"red\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(3)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,gBAAgB,QAAQ,QAAQ;AACzC,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc1C,SAASC,KAAKA,CAAAC,IAAA,EAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC;EAAkB,CAAC,GAAAF,IAAA;EAClC,MAAM;IAAEG,SAAS;IAAEC;EAAK,CAAC,GAAGV,QAAQ,CAAgB,CAAC,OAAO,EAAEQ,MAAM,CAAC,EAAE,MACrEP,gBAAgB,CAACO,MAAM,CACzB,CAAC;EACD,oBACEJ,OAAA;IAAAO,QAAA,EACGF,SAAS,GACR,kBAAkB,gBAElBL,OAAA,CAACF,UAAU;MACTU,IAAI,EAAE,MAAO;MACbC,MAAM,EAAE,CACN;QACEC,IAAI,EAAE,OAAO;QACbJ,IAAI,EAAEA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,GAAG,CAAEC,KAAK,IAAKC,UAAU,CAACD,KAAK,CAACE,KAAK,CAAC;MACpD,CAAC,CACD;MACFC,OAAO,EAAE;QACPC,KAAK,EAAE;UACLC,MAAM,EAAE,GAAG;UACXC,KAAK,EAAE,GAAG;UACVC,OAAO,EAAE;YACPC,IAAI,EAAE;UACR;UACA;QACF,CAAC;;QACD;QACAC,MAAM,EAAE;UACNC,KAAK,EAAE,QAAQ;UACfJ,KAAK,EAAE;QACT,CAAC;QACD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAK,OAAO,EAAE;UACPC,CAAC,EAAE;YACDC,SAAS,EAAGC,KAAK,IAAM,KAAIA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAE;UAC9C;QACF;MACF;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5B,EAAA,CAtDQF,KAAK;EAAA,QACgBL,QAAQ;AAAA;AAAAoC,EAAA,GAD7B/B,KAAK;AAwDd,eAAeA,KAAK;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}