{"ast":null,"code":"var _jsxFileName = \"/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Chart.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexCharts from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chart(_ref) {\n  _s();\n  var _data$map;\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId)\n  // { refetchInterval: 10000 }\n  );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexCharts, {\n      type: \"line\",\n      series: [{\n        data: (_data$map = data === null || data === void 0 ? void 0 : data.map(price => ({\n          x: price.time_close,\n          y: [price.open, price.high, price.low, price.close]\n        }))) !== null && _data$map !== void 0 ? _data$map : []\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n    // <ApexCharts\n    //   type={\"line\"}\n    //   series={[\n    //     {\n    //       name: \"Price\",\n    //       data: data?.map((price) => price.close) ?? [],\n    //     },\n    //   ]}\n    //   options={{\n    //     chart: {\n    //       height: 500,\n    //       width: 500,\n    //       toolbar: {\n    //         show: false,\n    //       },\n    //       background: \"transparent\",\n    //     },\n    //     grid: { show: false },\n    //     stroke: {\n    //       curve: \"smooth\",\n    //       width: 5,\n    //     },\n    //     yaxis: {\n    //       show: false,\n    //     },\n    //     xaxis: {\n    //       axisBorder: { show: false },\n    //       labels: { show: false },\n    //       axisTicks: { show: false },\n    //       type: \"datetime\",\n    //       categories:\n    //         data?.map((price) =>\n    //           new Date(Number(price.time_close) * 1000).toISOString()\n    //         ) ?? [],\n    //     },\n    //     // fill: {\n    //     //   type: \"gradient\",\n    //     //   gradient: { gradientToColors: [\"blue\"],stops:[0,100] },\n    //     // },\n    //     // colors: [\"red\"],\n    //     tooltip: {\n    //       y: {\n    //         formatter: (value) => `$ ${value.toFixed(3)}`,\n    //       },\n    //     },\n    //   }}\n    // />\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useQuery","fetchCoinHistory","ApexCharts","jsxDEV","_jsxDEV","Chart","_ref","_s","_data$map","coinId","isLoading","data","children","type","series","map","price","x","time_close","y","open","high","low","close","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexCharts from \"react-apexcharts\";\ninterface CharProps {\n  coinId: string;\n}\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\nfunction Chart({ coinId }: CharProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId)\n    // { refetchInterval: 10000 }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexCharts\n          type={\"line\"}\n          series={[\n            {\n              data:\n                data?.map((price) => ({\n                  x: price.time_close,\n                  y: [price.open, price.high, price.low, price.close],\n                })) ?? [],\n            },\n          ]}\n        />\n        // <ApexCharts\n        //   type={\"line\"}\n        //   series={[\n        //     {\n        //       name: \"Price\",\n        //       data: data?.map((price) => price.close) ?? [],\n        //     },\n        //   ]}\n        //   options={{\n        //     chart: {\n        //       height: 500,\n        //       width: 500,\n        //       toolbar: {\n        //         show: false,\n        //       },\n        //       background: \"transparent\",\n        //     },\n        //     grid: { show: false },\n        //     stroke: {\n        //       curve: \"smooth\",\n        //       width: 5,\n        //     },\n        //     yaxis: {\n        //       show: false,\n        //     },\n        //     xaxis: {\n        //       axisBorder: { show: false },\n        //       labels: { show: false },\n        //       axisTicks: { show: false },\n        //       type: \"datetime\",\n        //       categories:\n        //         data?.map((price) =>\n        //           new Date(Number(price.time_close) * 1000).toISOString()\n        //         ) ?? [],\n        //     },\n        //     // fill: {\n        //     //   type: \"gradient\",\n        //     //   gradient: { gradientToColors: [\"blue\"],stops:[0,100] },\n        //     // },\n        //     // colors: [\"red\"],\n        //     tooltip: {\n        //       y: {\n        //         formatter: (value) => `$ ${value.toFixed(3)}`,\n        //       },\n        //     },\n        //   }}\n        // />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,gBAAgB,QAAQ,QAAQ;AACzC,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc1C,SAASC,KAAKA,CAAAC,IAAA,EAAwB;EAAAC,EAAA;EAAA,IAAAC,SAAA;EAAA,IAAvB;IAAEC;EAAkB,CAAC,GAAAH,IAAA;EAClC,MAAM;IAAEI,SAAS;IAAEC;EAAK,CAAC,GAAGX,QAAQ,CAClC,CAAC,OAAO,EAAES,MAAM,CAAC,EACjB,MAAMR,gBAAgB,CAACQ,MAAM;EAC7B;EACF,CAAC;;EACD,oBACEL,OAAA;IAAAQ,QAAA,EACGF,SAAS,GACR,kBAAkB,gBAElBN,OAAA,CAACF,UAAU;MACTW,IAAI,EAAE,MAAO;MACbC,MAAM,EAAE,CACN;QACEH,IAAI,GAAAH,SAAA,GACFG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,GAAG,CAAEC,KAAK,KAAM;UACpBC,CAAC,EAAED,KAAK,CAACE,UAAU;UACnBC,CAAC,EAAE,CAACH,KAAK,CAACI,IAAI,EAAEJ,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,GAAG,EAAEN,KAAK,CAACO,KAAK;QACpD,CAAC,CAAC,CAAC,cAAAf,SAAA,cAAAA,SAAA,GAAI;MACX,CAAC;IACD;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpB,EAAA,CAzEQF,KAAK;EAAA,QACgBL,QAAQ;AAAA;AAAA4B,EAAA,GAD7BvB,KAAK;AA2Ed,eAAeA,KAAK;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}