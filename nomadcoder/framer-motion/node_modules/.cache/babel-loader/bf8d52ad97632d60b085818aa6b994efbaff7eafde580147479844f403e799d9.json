{"ast":null,"code":"var _jsxFileName = \"/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Chart.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexCharts from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chart(_ref) {\n  _s();\n  var _data$map, _data$map2;\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId)\n  // { refetchInterval: 10000 }\n  );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexCharts, {\n      type: \"candlestick\",\n      series: [{\n        name: \"Price\",\n        data: (_data$map = data === null || data === void 0 ? void 0 : data.map(price => ({\n          x: price.time_close,\n          y: [price.open, price.high, price.low, price.close]\n        }))) !== null && _data$map !== void 0 ? _data$map : []\n      }],\n      options: {\n        chart: {\n          height: 500,\n          width: 500,\n          toolbar: {\n            show: false\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 5\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          labels: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          type: \"datetime\",\n          categories: (_data$map2 = data === null || data === void 0 ? void 0 : data.map(price => new Date(Number(price.time_close) * 1000).toISOString())) !== null && _data$map2 !== void 0 ? _data$map2 : []\n        },\n        // fill: {\n        //   type: \"gradient\",\n        //   gradient: { gradientToColors: [\"blue\"],stops:[0,100] },\n        // },\n        // colors: [\"red\"],\n        tooltip: {\n          y: {\n            formatter: value => `$ ${value.toFixed(3)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useQuery","fetchCoinHistory","ApexCharts","jsxDEV","_jsxDEV","Chart","_ref","_s","_data$map","_data$map2","coinId","isLoading","data","children","type","series","name","map","price","x","time_close","y","open","high","low","close","options","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","labels","axisTicks","categories","Date","Number","toISOString","tooltip","formatter","value","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexCharts from \"react-apexcharts\";\ninterface CharProps {\n  coinId: string;\n}\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\nfunction Chart({ coinId }: CharProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId)\n    // { refetchInterval: 10000 }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexCharts\n          type={\"candlestick\"}\n          series={[\n            {\n              name: \"Price\",\n              data:\n                data?.map((price) => ({\n                  x: price.time_close,\n                  y: [price.open, price.high, price.low, price.close],\n                })) ?? [],\n            },\n          ]}\n          options={{\n            chart: {\n              height: 500,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            grid: { show: false },\n            stroke: {\n              curve: \"smooth\",\n              width: 5,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              labels: { show: false },\n              axisTicks: { show: false },\n              type: \"datetime\",\n              categories:\n                data?.map((price) =>\n                  new Date(Number(price.time_close) * 1000).toISOString()\n                ) ?? [],\n            },\n            // fill: {\n            //   type: \"gradient\",\n            //   gradient: { gradientToColors: [\"blue\"],stops:[0,100] },\n            // },\n            // colors: [\"red\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(3)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,gBAAgB,QAAQ,QAAQ;AACzC,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc1C,SAASC,KAAKA,CAAAC,IAAA,EAAwB;EAAAC,EAAA;EAAA,IAAAC,SAAA,EAAAC,UAAA;EAAA,IAAvB;IAAEC;EAAkB,CAAC,GAAAJ,IAAA;EAClC,MAAM;IAAEK,SAAS;IAAEC;EAAK,CAAC,GAAGZ,QAAQ,CAClC,CAAC,OAAO,EAAEU,MAAM,CAAC,EACjB,MAAMT,gBAAgB,CAACS,MAAM;EAC7B;EACF,CAAC;;EACD,oBACEN,OAAA;IAAAS,QAAA,EACGF,SAAS,GACR,kBAAkB,gBAElBP,OAAA,CAACF,UAAU;MACTY,IAAI,EAAE,aAAc;MACpBC,MAAM,EAAE,CACN;QACEC,IAAI,EAAE,OAAO;QACbJ,IAAI,GAAAJ,SAAA,GACFI,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,GAAG,CAAEC,KAAK,KAAM;UACpBC,CAAC,EAAED,KAAK,CAACE,UAAU;UACnBC,CAAC,EAAE,CAACH,KAAK,CAACI,IAAI,EAAEJ,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,GAAG,EAAEN,KAAK,CAACO,KAAK;QACpD,CAAC,CAAC,CAAC,cAAAjB,SAAA,cAAAA,SAAA,GAAI;MACX,CAAC,CACD;MACFkB,OAAO,EAAE;QACPC,KAAK,EAAE;UACLC,MAAM,EAAE,GAAG;UACXC,KAAK,EAAE,GAAG;UACVC,OAAO,EAAE;YACPC,IAAI,EAAE;UACR,CAAC;UACDC,UAAU,EAAE;QACd,CAAC;QACDC,IAAI,EAAE;UAAEF,IAAI,EAAE;QAAM,CAAC;QACrBG,MAAM,EAAE;UACNC,KAAK,EAAE,QAAQ;UACfN,KAAK,EAAE;QACT,CAAC;QACDO,KAAK,EAAE;UACLL,IAAI,EAAE;QACR,CAAC;QACDM,KAAK,EAAE;UACLC,UAAU,EAAE;YAAEP,IAAI,EAAE;UAAM,CAAC;UAC3BQ,MAAM,EAAE;YAAER,IAAI,EAAE;UAAM,CAAC;UACvBS,SAAS,EAAE;YAAET,IAAI,EAAE;UAAM,CAAC;UAC1BjB,IAAI,EAAE,UAAU;UAChB2B,UAAU,GAAAhC,UAAA,GACRG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,GAAG,CAAEC,KAAK,IACd,IAAIwB,IAAI,CAACC,MAAM,CAACzB,KAAK,CAACE,UAAU,CAAC,GAAG,IAAI,CAAC,CAACwB,WAAW,CAAC,CACxD,CAAC,cAAAnC,UAAA,cAAAA,UAAA,GAAI;QACT,CAAC;QACD;QACA;QACA;QACA;QACA;QACAoC,OAAO,EAAE;UACPxB,CAAC,EAAE;YACDyB,SAAS,EAAGC,KAAK,IAAM,KAAIA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAE;UAC9C;QACF;MACF;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC7C,EAAA,CAjEQF,KAAK;EAAA,QACgBL,QAAQ;AAAA;AAAAqD,EAAA,GAD7BhD,KAAK;AAmEd,eAAeA,KAAK;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}