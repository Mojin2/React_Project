{"ast":null,"code":"var _jsxFileName = \"/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Price.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Price() {\n  _s();\n  const {\n    isLoading: tickersLoading,\n    data: tickersData\n  } = useQuery([\"tickers\", coinId], () => fetchCoinTickers(coinId));\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Price\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n}\n_s(Price, \"oE3xkajO9KQhicRGCqPem0MGO9k=\", false, function () {\n  return [useQuery];\n});\n_c = Price;\nexport default Price;\nvar _c;\n$RefreshReg$(_c, \"Price\");","map":{"version":3,"names":["useQuery","jsxDEV","_jsxDEV","Price","_s","isLoading","tickersLoading","data","tickersData","coinId","fetchCoinTickers","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mojin/Documents/React_Project/nomadcoder/reactmaster-typescript/src/routes/Price.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Price() {\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId)\n  );\n  return <h1>Price</h1>;\n}\n\nexport default Price;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoCvC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM;IAAEC,SAAS,EAAEC,cAAc;IAAEC,IAAI,EAAEC;EAAY,CAAC,GAAGR,QAAQ,CAC/D,CAAC,SAAS,EAAES,MAAM,CAAC,EACnB,MAAMC,gBAAgB,CAACD,MAAM,CAC/B,CAAC;EACD,oBAAOP,OAAA;IAAAS,QAAA,EAAI;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACvB;AAACX,EAAA,CANQD,KAAK;EAAA,QAC6CH,QAAQ;AAAA;AAAAgB,EAAA,GAD1Db,KAAK;AAQd,eAAeA,KAAK;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}